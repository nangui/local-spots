# ü§ù R√®gles de Contribution - LocalSpots

## üìã Standards de Code

### Style et Formatage
- **ESLint** et **Prettier** configur√©s et obligatoires
- **TypeScript strict mode** activ√©
- **Conventional Commits** pour tous les commits
- **80 caract√®res max** par ligne (avec exceptions pour URLs)

### Conventions de Nommage

#### Variables et Fonctions
```typescript
// ‚úÖ Bon - camelCase
const userName = 'John'
function calculateTotal() {}
const isAuthenticated = true

// ‚ùå Mauvais
const user_name = 'John'
function CalculateTotal() {}
const IsAuthenticated = true
```

#### Classes et Types
```typescript
// ‚úÖ Bon - PascalCase
class UserController {}
interface UserData {}
type SpotCategory = string
enum UserRole {}

// ‚ùå Mauvais
class userController {}
interface userData {}
```

#### Constantes
```typescript
// ‚úÖ Bon - UPPER_SNAKE_CASE
const MAX_RETRIES = 3
const API_BASE_URL = 'https://api.example.com'
const DEFAULT_TIMEOUT = 5000

// ‚ùå Mauvais
const maxRetries = 3
const apiBaseUrl = 'https://api.example.com'
```

### Structure des Fichiers
```
app/
‚îú‚îÄ‚îÄ controllers/
‚îÇ   ‚îî‚îÄ‚îÄ spots_controller.ts    # Controllers en snake_case
‚îú‚îÄ‚îÄ models/
‚îÇ   ‚îî‚îÄ‚îÄ spot.ts                # Models en singular
‚îú‚îÄ‚îÄ validators/
‚îÇ   ‚îî‚îÄ‚îÄ create_spot.ts         # Validators descriptifs
‚îî‚îÄ‚îÄ services/
    ‚îî‚îÄ‚îÄ geocoding_service.ts   # Services avec _service suffix
```

## üß™ Tests

### Coverage Minimum Requis
- **Statements** : 80%
- **Branches** : 75%
- **Functions** : 80%
- **Lines** : 80%

### Structure des Tests
```typescript
// tests/unit/services/spot_service.spec.ts
import { test } from '@japa/runner'
import SpotService from '#services/spot_service'

test.group('SpotService', () => {
  test('should calculate distance between two points', ({ assert }) => {
    const distance = SpotService.calculateDistance(
      48.8566, 2.3522,  // Paris
      51.5074, -0.1278  // Londres
    )
    
    assert.closeTo(distance, 344, 1)
  })

  test('should validate coordinates', ({ assert }) => {
    assert.isTrue(SpotService.isValidLatitude(45.5))
    assert.isFalse(SpotService.isValidLatitude(91))
  })
})
```

### Tests Fonctionnels
```typescript
// tests/functional/spots.spec.ts
test.group('Spots API', (group) => {
  group.each.setup(async () => {
    await Database.beginGlobalTransaction()
    return () => Database.rollbackGlobalTransaction()
  })

  test('GET /spots returns paginated list', async ({ client }) => {
    const response = await client.get('/api/spots?page=1&limit=10')
    
    response.assertStatus(200)
    response.assertBodyContains({
      meta: {
        total: expect.any(Number),
        per_page: 10,
        current_page: 1
      }
    })
  })
})
```

### Factories pour les Tests
```typescript
// tests/factories/spot_factory.ts
export const SpotFactory = Factory
  .define(Spot, ({ faker }) => ({
    name: faker.company.name(),
    description: faker.lorem.paragraph(),
    latitude: faker.location.latitude(),
    longitude: faker.location.longitude(),
    category: faker.helpers.arrayElement(['restaurant', 'cafe', 'bar'])
  }))
  .relation('user', () => UserFactory)
  .build()
```

## üìù Documentation

### Commentaires de Code
```typescript
/**
 * R√©cup√®re les spots √† proximit√© d'une position
 * @param latitude - Latitude de la position
 * @param longitude - Longitude de la position
 * @param radius - Rayon de recherche en kilom√®tres
 * @returns Liste des spots trouv√©s
 */
async function getNearbySpots(
  latitude: number,
  longitude: number,
  radius: number = 10
): Promise<Spot[]> {
  // Logique de recherche g√©ospatiale
}
```

### Documentation API
- Tous les endpoints doivent √™tre document√©s
- Inclure exemples de requ√™tes et r√©ponses
- Documenter les codes d'erreur possibles
- Maintenir la documentation √† jour

## üîÑ Processus de D√©veloppement

### Workflow Git
```bash
# 1. Synchroniser avec upstream
git fetch upstream
git checkout develop
git merge upstream/develop

# 2. Cr√©er votre branche
git checkout -b feature/ma-feature

# 3. Faire vos modifications
git add .
git commit -m "feat: description de la feature"

# 4. Pousser vers votre fork
git push origin feature/ma-feature
```

### Types de Branches
- `main` - Branche de production stable
- `develop` - Branche de d√©veloppement
- `feature/*` - Nouvelles fonctionnalit√©s
- `fix/*` - Corrections de bugs
- `hotfix/*` - Corrections urgentes en production

### Pull Request Template
```markdown
## Description
Br√®ve description des changements

## Type de changement
- [ ] Bug fix
- [ ] Nouvelle feature
- [ ] Breaking change
- [ ] Documentation

## Tests
- [ ] Les tests existants passent
- [ ] De nouveaux tests ont √©t√© ajout√©s
- [ ] Coverage maintenu au-dessus de 80%

## Checklist
- [ ] Mon code suit les guidelines du projet
- [ ] J'ai fait une auto-review de mon code
- [ ] J'ai comment√© les parties complexes
- [ ] J'ai mis √† jour la documentation
- [ ] Le linting passe sans erreurs
```

## üöÄ Scripts de D√©veloppement

### Commandes NPM
```bash
# D√©veloppement
npm run dev          # Serveur avec hot reload
npm run build        # Build pour production
npm start           # D√©marrer en production

# Tests et qualit√©
npm test            # Lancer les tests
npm run lint        # V√©rifier le code
npm run format      # Formater le code
npm run typecheck   # V√©rifier les types

# Base de donn√©es
node ace migration:run      # Ex√©cuter les migrations
node ace migration:rollback # Annuler les migrations
node ace db:seed           # Peupler la base de donn√©es
```

### Scripts Personnalis√©s
```bash
# Voir toutes les commandes disponibles
make help

# Installation compl√®te
make fresh

# Lancer le d√©veloppement
make dev

# Lancer les tests
make test
```

## üîí S√©curit√©

### Bonnes Pratiques
- Ne jamais commiter de secrets dans le code
- Utiliser les variables d'environnement pour la configuration
- Valider et sanitizer toutes les entr√©es utilisateur
- Utiliser les ORM/Query Builder pour √©viter les injections SQL

### Audit de S√©curit√©
```bash
# V√©rifier les vuln√©rabilit√©s
npm audit

# Corriger automatiquement
npm audit fix

# V√©rifier les d√©pendances obsol√®tes
npm outdated
```

## üìä Qualit√© du Code

### Linting et Formatage
```bash
# V√©rifier le linting
npm run lint

# Formater le code
npm run format

# V√©rifier les types TypeScript
npm run typecheck

# V√©rifier tout en une fois
npm run quality
```

### Configuration ESLint
```json
// .eslintrc.json
{
  "extends": [
    "@adonisjs/eslint-config",
    "prettier"
  ],
  "rules": {
    "no-console": "warn",
    "prefer-const": "error",
    "no-unused-vars": "error"
  }
}
```

## üö® Gestion des Erreurs

### Logging
```typescript
import logger from '@adonisjs/core/services/logger'

// Logs d'information
logger.info('User registered', { userId: user.id, email: user.email })

// Logs d'erreur
logger.error('Failed to create spot', { 
  error: error.message, 
  userId: user.id 
})

// Logs de debug (uniquement en d√©veloppement)
logger.debug('Processing request', { 
  method: request.method(), 
  url: request.url() 
})
```

### Gestion des Exceptions
```typescript
// app/exceptions/handler.ts
export default class ExceptionHandler extends BaseExceptionHandler {
  async handle(error: any, ctx: HttpContext) {
    // Log de l'erreur
    logger.error('Exception occurred', {
      error: error.message,
      stack: error.stack,
      url: ctx.request.url(),
      method: ctx.request.method()
    })

    // Retourner une r√©ponse appropri√©e
    if (error.status === 404) {
      return ctx.response.notFound({
        error: 'Resource not found',
        message: error.message
      })
    }

    return super.handle(error, ctx)
  }
}
```

## üìà Performance

### Bonnes Pratiques
- Utiliser la pagination pour les listes
- Impl√©menter le caching appropri√©
- Optimiser les requ√™tes de base de donn√©es
- Utiliser l'eager loading pour √©viter le probl√®me N+1

### Monitoring
```typescript
// Middleware de performance
export default class PerformanceMiddleware {
  async handle(ctx: HttpContext, next: NextFn) {
    const start = Date.now()
    
    await next()
    
    const duration = Date.now() - start
    
    if (duration > 1000) {
      logger.warn('Slow request detected', {
        url: ctx.request.url(),
        method: ctx.request.method(),
        duration: `${duration}ms`
      })
    }
  }
}
```

## üîÆ √âvolutions Futures

### Outils de Qualit√©
- **SonarQube** pour l'analyse de qualit√© du code
- **CodeClimate** pour les m√©triques de qualit√©
- **Dependabot** pour les mises √† jour automatiques
- **Renovate** pour la gestion des d√©pendances

### Int√©gration Continue
- **GitHub Actions** pour l'automatisation
- **Codecov** pour le reporting de coverage
- **Stryker** pour les tests de mutation
- **Bundle Analyzer** pour l'analyse des bundles
description:
globs:
alwaysApply: true
---
