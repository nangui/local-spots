# üóÑÔ∏è R√®gles de Base de Donn√©es - LocalSpots

## üìä Sch√©ma Principal

### Tables Principales
- **Users** : Gestion des utilisateurs et authentification
- **Spots** : Lieux locaux avec g√©olocalisation
- **Categories** : Classification des types de lieux
- **Reviews** : Avis et √©valuations des utilisateurs
- **Favorites** : Spots favoris des utilisateurs

## üèóÔ∏è Structure des Tables

### Users Table
```sql
CREATE TABLE users (
  id SERIAL PRIMARY KEY,
  username VARCHAR(255) UNIQUE NOT NULL,
  email VARCHAR(255) UNIQUE NOT NULL,
  password VARCHAR(255) NOT NULL,
  email_verified_at TIMESTAMP NULL,
  remember_me_token VARCHAR(255) NULL,
  created_at TIMESTAMP NOT NULL DEFAULT NOW(),
  updated_at TIMESTAMP NOT NULL DEFAULT NOW()
);
```

**Index requis:**
- `users_email_index` sur `email`
- `users_username_index` sur `username`

### Spots Table
```sql
CREATE TABLE spots (
  id SERIAL PRIMARY KEY,
  user_id INTEGER NOT NULL REFERENCES users(id) ON DELETE CASCADE,
  name VARCHAR(255) NOT NULL,
  description TEXT NULL,
  latitude DECIMAL(10,8) NOT NULL,
  longitude DECIMAL(11,8) NOT NULL,
  address VARCHAR(500) NULL,
  category VARCHAR(100) NOT NULL,
  status ENUM('draft', 'published', 'archived', 'moderated') DEFAULT 'draft',
  opening_hours JSONB NULL,
  phone VARCHAR(50) NULL,
  website VARCHAR(255) NULL,
  price_range INTEGER CHECK (price_range >= 1 AND price_range <= 4),
  rating DECIMAL(3,2) DEFAULT 0,
  review_count INTEGER DEFAULT 0,
  created_at TIMESTAMP NOT NULL DEFAULT NOW(),
  updated_at TIMESTAMP NOT NULL DEFAULT NOW()
);
```

**Index requis:**
- `spots_user_id_index` sur `user_id`
- `spots_category_index` sur `category`
- `spots_location_index` sur `(latitude, longitude)`
- `spots_status_index` sur `status`

### Reviews Table
```sql
CREATE TABLE reviews (
  id SERIAL PRIMARY KEY,
  user_id INTEGER NOT NULL REFERENCES users(id) ON DELETE CASCADE,
  spot_id INTEGER NOT NULL REFERENCES spots(id) ON DELETE CASCADE,
  rating INTEGER NOT NULL CHECK (rating >= 1 AND rating <= 5),
  comment TEXT NULL,
  created_at TIMESTAMP NOT NULL DEFAULT NOW(),
  updated_at TIMESTAMP NOT NULL DEFAULT NOW(),
  UNIQUE(user_id, spot_id)
);
```

**Index requis:**
- `reviews_spot_id_index` sur `spot_id`
- `reviews_user_id_index` sur `user_id`
- `reviews_rating_index` sur `rating`

## üîó Relations et Contraintes

### Contraintes de R√©f√©rence
- **CASCADE DELETE** pour maintenir l'int√©grit√© r√©f√©rentielle
- **UNIQUE** sur les combinaisons critiques (user_id, spot_id)
- **CHECK** pour valider les valeurs (rating 1-5, price_range 1-4)

### Relations Principales
```
Users (1) ‚Üê‚Üí (N) Spots
Spots (1) ‚Üê‚Üí (N) Reviews
Users (1) ‚Üê‚Üí (N) Reviews
Users (1) ‚Üê‚Üí (N) Favorites
Spots (1) ‚Üê‚Üí (N) Favorites
```

## üìà Optimisations de Performance

### Index Strat√©giques
1. **Index G√©ospatial** : `(latitude, longitude)` pour les requ√™tes de proximit√©
2. **Index Compos√©s** : `(category, status)` pour le filtrage
3. **Index de Performance** : `(rating, review_count)` pour le tri

### Requ√™tes Optimis√©es
```sql
-- Recherche par proximit√© avec ST_DWithin
SELECT * FROM spots 
WHERE ST_DWithin(
  ST_MakePoint(longitude, latitude)::geography,
  ST_MakePoint(?, ?)::geography,
  ? * 1000
);

-- Pagination efficace
SELECT * FROM spots 
WHERE status = 'published'
ORDER BY created_at DESC
LIMIT ? OFFSET ?;
```

## üîí S√©curit√© et Validation

### Protection des Donn√©es
- **Mots de passe** : Hash√©s avec bcrypt (salt rounds: 10)
- **Validation** : Contraintes au niveau base + application
- **SQL Injection** : Protection via Lucid ORM et param√®tres li√©s

### Contr√¥les d'Acc√®s
- **Row Level Security** pour la confidentialit√© des donn√©es
- **Audit Trail** pour les modifications critiques
- **Soft Delete** pour les donn√©es importantes

## üìù Migrations

### Standards de Nommage
```bash
# Format: YYYY_MM_DD_HHMMSS_description.ts
2024_01_15_143000_create_users_table.ts
2024_01_15_143100_create_spots_table.ts
2024_01_15_143200_create_reviews_table.ts
```

### Structure des Migrations
```typescript
import { BaseSchema } from '@adonisjs/lucid/schema'

export default class extends BaseSchema {
  protected tableName = 'table_name'

  async up() {
    this.schema.createTable(this.tableName, (table) => {
      table.increments('id')
      // D√©finition des colonnes
      table.timestamp('created_at').notNullable()
      table.timestamp('updated_at').notNullable()
    })
  }

  async down() {
    this.schema.dropTable(this.tableName)
  }
}
```

## üå± Seeders

### Donn√©es de Test
- **Users** : Utilisateurs de test avec diff√©rents r√¥les
- **Categories** : Cat√©gories pr√©d√©finies (restaurant, caf√©, bar, etc.)
- **Spots** : Exemples de lieux pour le d√©veloppement
- **Reviews** : Avis de test pour valider les fonctionnalit√©s

### Structure des Seeders
```typescript
export default class extends BaseSeeder {
  async run() {
    // Cr√©ation des donn√©es de base
    await User.createMany([
      { email: 'admin@test.com', role: 'admin' },
      { email: 'user@test.com', role: 'user' }
    ])

    await Category.createMany([
      { name: 'Restaurant', slug: 'restaurant' },
      { name: 'Caf√©', slug: 'cafe' }
    ])
  }
}
```

## üöÄ Commandes Utiles

### Gestion des Migrations
```bash
# Ex√©cuter les migrations
node ace migration:run

# Annuler la derni√®re migration
node ace migration:rollback

# R√©initialiser toutes les migrations
node ace migration:reset

# Voir le statut des migrations
node ace migration:status

# Cr√©er une nouvelle migration
node ace make:migration create_table_name
```

### Gestion des Seeders
```bash
# Cr√©er un seeder
node ace make:seeder UserSeeder

# Ex√©cuter tous les seeders
node ace db:seed

# Ex√©cuter un seeder sp√©cifique
node ace db:seed --files="./database/seeders/user_seeder.ts"
```

## üìä Monitoring et Maintenance

### V√©rifications R√©guli√®res
- **Performance** : Analyser les requ√™tes lentes
- **Index** : V√©rifier l'utilisation des index
- **Espace** : Surveiller la croissance des tables
- **Backup** : Tester la restauration des sauvegardes

### Scripts de Maintenance
```bash
# Analyse des performances
EXPLAIN ANALYZE SELECT * FROM spots WHERE category = 'restaurant';

# V√©rification des index
SELECT schemaname, tablename, indexname, idx_scan, idx_tup_read, idx_tup_fetch
FROM pg_stat_user_indexes;

# Nettoyage des donn√©es obsol√®tes
DELETE FROM spots WHERE status = 'archived' AND updated_at < NOW() - INTERVAL '1 year';
```

## üîÆ √âvolutions Futures

### Fonctionnalit√©s Avanc√©es
- **Full-Text Search** : Recherche textuelle avanc√©e
- **Partitioning** : Partitionnement des tables par date
- **Replication** : R√©plication pour la haute disponibilit√©
- **Sharding** : Distribution horizontale des donn√©es

### Optimisations
- **Connection Pooling** : Gestion optimis√©e des connexions
- **Query Caching** : Cache des requ√™tes fr√©quentes
- **Materialized Views** : Vues mat√©rialis√©es pour les rapports
- **Parallel Queries** : Ex√©cution parall√®le des requ√™tes complexes
description:
globs:
alwaysApply: true
---
