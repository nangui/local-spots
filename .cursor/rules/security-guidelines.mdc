---
title: R√®gles de S√©curit√© - LocalSpots
---

# üîí R√®gles de S√©curit√© - LocalSpots

## üõ°Ô∏è Protection OWASP Top 10

### 1. Injection SQL
- **Utiliser TOUJOURS** Lucid ORM ou Query Builder
- **Jamais** de requ√™tes SQL brutes avec concat√©nation
- **Param√®tres li√©s** pour les requ√™tes personnalis√©es

```typescript
// ‚úÖ Bon - ORM s√©curis√©
const spots = await Spot.query()
  .where('category', category)
  .where('status', 'published')

// ‚úÖ Bon - Param√®tres li√©s
const results = await Database.rawQuery(
  'SELECT * FROM spots WHERE category = ? AND status = ?',
  [category, 'published']
)

// ‚ùå Mauvais - Injection SQL possible
const results = await Database.rawQuery(
  `SELECT * FROM spots WHERE category = '${category}'`
)
```

### 2. XSS (Cross-Site Scripting)
- **√âchappement automatique** dans les templates Edge
- **Validation stricte** des entr√©es utilisateur
- **Content Security Policy** configur√©

```typescript
// ‚úÖ Bon - √âchappement automatique
{{ user.name }}  // √âchapp√© automatiquement

// ‚úÖ Bon - HTML s√ªr uniquement
{{{ trustedHtml }}}  // Non √©chapp√© - utiliser avec pr√©caution

// ‚ùå Mauvais - Risque XSS
<div>${userInput}</div>  // √âchappement manuel requis
```

### 3. CSRF (Cross-Site Request Forgery)
- **Protection CSRF** activ√©e par d√©faut
- **Tokens CSRF** pour tous les formulaires
- **Routes exempt√©es** uniquement si n√©cessaire

```typescript
// config/shield.ts
export default shieldConfig({
  csrf: {
    enabled: true,
    exceptRoutes: ['/webhook/*'],  // Routes exempt√©es
    enableXsrfCookie: true,
  },
})
```

### 4. Authentification Cass√©e
- **Hashage bcrypt** pour les mots de passe
- **Sessions s√©curis√©es** avec expiration
- **Tokens JWT** avec rotation

```typescript
// config/auth.ts
export default authConfig({
  default: 'web',
  guards: {
    web: sessionGuard({
      useRememberMeTokens: true,
      rememberMeTokensAge: '30 days',
      provider: sessionUserProvider({
        model: () => import('#models/user'),
      }),
    }),
  },
})
```

### 5. Exposition de Donn√©es Sensibles
- **S√©rialisation contr√¥l√©e** des mod√®les
- **Masquage des champs sensibles**
- **Logs sans donn√©es personnelles**

```typescript
// app/models/user.ts
export default class User extends BaseModel {
  @column({ serializeAs: null })
  declare password: string

  @column({ serializeAs: null })
  declare rememberMeToken: string | null

  // S√©rialisation contr√¥l√©e
  serializeExtras = {
    public: {
      fields: {
        pick: ['id', 'username', 'email', 'created_at']
      }
    }
  }
}
```

## üîê Authentification et Autorisation

### Strat√©gie d'Authentification
```typescript
// config/auth.ts
export default authConfig({
  default: 'web',
  guards: {
    web: sessionGuard({
      useRememberMeTokens: true,
      rememberMeTokensAge: '30 days',
      provider: sessionUserProvider({
        model: () => import('#models/user'),
      }),
    }),
    api: tokenGuard({
      provider: tokenUserProvider({
        model: () => import('#models/user'),
      }),
    }),
  },
})
```

### Politique de Mots de Passe
```typescript
// app/validators/auth_validator.ts
export const passwordRules = vine
  .string()
  .minLength(8)
  .maxLength(128)
  .regex(/^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)(?=.*[@$!%*?&])[A-Za-z\d@$!%*?&]/)
  .withMessage('Password must contain uppercase, lowercase, number and special character')
```

### Protection contre le Brute Force
```typescript
// app/middleware/throttle_middleware.ts
export default class ThrottleMiddleware {
  async handle({ request, response }: HttpContext, next: NextFn) {
    const key = `login_${request.ip()}`
    const limiter = Limiter.use('login')

    if (await limiter.isBlocked(key)) {
      return response.tooManyRequests({
        error: 'Too many login attempts. Please try again later.',
        retryAfter: await limiter.availableIn(key),
      })
    }

    await limiter.attempt(key)
    return next()
  }
}
```

## üîë Gestion des Secrets

### Variables d'Environnement
```bash
# .env
APP_KEY=use-a-random-32-character-string
DB_PASSWORD=use-a-strong-password
JWT_SECRET=another-random-string
SMTP_PASSWORD=smtp-password
GOOGLE_MAPS_API_KEY=your-api-key
```

### G√©n√©ration de Cl√©s S√©curis√©es
```bash
# G√©n√©rer APP_KEY
node ace generate:key

# G√©n√©rer JWT secret
openssl rand -hex 32

# G√©n√©rer mot de passe fort
openssl rand -base64 32
```

### Rotation des Secrets
```typescript
// app/tasks/rotate_app_key.ts
export default class RotateAppKey {
  public static commandName = 'app:rotate-key'

  async run() {
    const oldKey = Env.get('APP_KEY')
    const newKey = generateRandomKey()
    
    // R√©encrypter les donn√©es avec la nouvelle cl√©
    await this.reencryptData(oldKey, newKey)
    
    console.log(`New APP_KEY: ${newKey}`)
    console.log('Update your .env file with this new key')
  }
}
```

## üõ°Ô∏è Headers de S√©curit√©

### Configuration des Headers
```typescript
// config/shield.ts
export default shieldConfig({
  xFrame: {
    enabled: true,
    action: 'DENY',
  },
  
  hsts: {
    enabled: true,
    maxAge: '180 days',
    includeSubDomains: true,
    preload: true,
  },
  
  contentTypeSniffing: {
    enabled: true,
  },
  
  xss: {
    enabled: true,
    mode: 'block',
  },
  
  csp: {
    enabled: true,
    directives: {
      defaultSrc: ["'self'"],
      scriptSrc: ["'self'", "'unsafe-inline'"],
      styleSrc: ["'self'", "'unsafe-inline'"],
      imgSrc: ["'self'", 'data:', 'https:'],
      fontSrc: ["'self'"],
      connectSrc: ["'self'"],
      mediaSrc: ["'none'"],
      objectSrc: ["'none'"],
      frameSrc: ["'none'"],
      baseUri: ["'self'"],
      formAction: ["'self'"],
      frameAncestors: ["'none'"],
      upgradeInsecureRequests: [],
    },
  },
})
```

## ‚úÖ Validation et Sanitisation

### Validation Stricte des Entr√©es
```typescript
// app/validators/spot_validator.ts
export const createSpotValidator = vine.compile(
  vine.object({
    name: vine
      .string()
      .trim()
      .escape()  // √âchapper les caract√®res HTML
      .minLength(3)
      .maxLength(255),
    
    description: vine
      .string()
      .trim()
      .escape()
      .maxLength(1000)
      .optional(),
    
    latitude: vine
      .number()
      .min(-90)
      .max(90),
    
    longitude: vine
      .number()
      .min(-180)
      .max(180),
    
    website: vine
      .string()
      .url()
      .optional(),
    
    email: vine
      .string()
      .email()
      .normalizeEmail()  // Normaliser l'email
      .optional(),
  })
)
```

### Sanitisation des Requ√™tes
```typescript
// Middleware de sanitisation
export default class SanitizationMiddleware {
  async handle({ request }: HttpContext, next: NextFn) {
    // Nettoyer les param√®tres de requ√™te
    const query = request.qs()
    const sanitizedQuery = this.sanitizeObject(query)
    
    // Remplacer les param√®tres originaux
    request.updateQs(sanitizedQuery)
    
    return next()
  }

  private sanitizeObject(obj: any): any {
    if (typeof obj !== 'object' || obj === null) {
      return this.sanitizeValue(obj)
    }

    const sanitized: any = {}
    for (const [key, value] of Object.entries(obj)) {
      sanitized[key] = this.sanitizeValue(value)
    }

    return sanitized
  }

  private sanitizeValue(value: any): any {
    if (typeof value === 'string') {
      return value.trim().replace(/[<>]/g, '')
    }
    return value
  }
}
```

## üö® Gestion des Incidents de S√©curit√©

### Logging de S√©curit√©
```typescript
// app/services/security_logger.ts
export default class SecurityLogger {
  static logFailedLogin(email: string, ip: string) {
    logger.warn('Failed login attempt', {
      email,
      ip,
      timestamp: new Date().toISOString(),
      type: 'FAILED_LOGIN',
    })
  }

  static logSuspiciousActivity(userId: number, activity: string) {
    logger.error('Suspicious activity detected', {
      userId,
      activity,
      timestamp: new Date().toISOString(),
      type: 'SUSPICIOUS_ACTIVITY',
    })
  }

  static logDataAccess(userId: number, resource: string, action: string) {
    logger.info('Data access', {
      userId,
      resource,
      action,
      timestamp: new Date().toISOString(),
      type: 'DATA_ACCESS',
    })
  }
}
```

### Plan de R√©ponse aux Incidents
```typescript
// app/commands/security_lockdown.ts
export default class SecurityLockdown extends BaseCommand {
  static commandName = 'security:lockdown'

  async run() {
    // 1. D√©sactiver les inscriptions
    await Setting.set('registrations_enabled', false)
    
    // 2. Forcer la d√©connexion de tous les utilisateurs
    await Session.query().delete()
    
    // 3. R√©voquer tous les tokens
    await Token.query().delete()
    
    // 4. Activer le mode maintenance
    await Setting.set('maintenance_mode', true)
    
    console.log('üîí Security lockdown activated')
  }
}
```

## üìä Audit de S√©curit√©

### Audit des D√©pendances
```bash
# V√©rifier les vuln√©rabilit√©s
npm audit

# Corriger automatiquement
npm audit fix

# V√©rifier les d√©pendances obsol√®tes
npm outdated

# Mettre √† jour les d√©pendances
npm update
```

### Tests de S√©curit√©
```typescript
// tests/security/auth.spec.ts
test('prevents SQL injection in login', async ({ client }) => {
  const response = await client.post('/login').json({
    email: "admin' OR '1'='1",
    password: "' OR '1'='1",
  })

  response.assertStatus(401)
})

test('prevents XSS in user input', async ({ client, assert }) => {
  const xssPayload = '<script>alert("XSS")</script>'
  
  const response = await client.post('/spots').json({
    name: xssPayload,
    description: xssPayload,
  })

  const spot = await Spot.first()
  assert.notInclude(spot!.name, '<script>')
  assert.notInclude(spot!.description, '<script>')
})
```

## üîÆ S√©curit√© Avanc√©e

### Chiffrement des Donn√©es
```typescript
// app/services/encryption_service.ts
import Encryption from '@adonisjs/core/services/encryption'

export default class EncryptionService {
  static encrypt(data: string): string {
    return Encryption.encrypt(data)
  }

  static decrypt(encrypted: string): string | null {
    try {
      return Encryption.decrypt(encrypted)
    } catch {
      return null
    }
  }
}
```

### Row Level Security
```sql
-- Activer RLS sur la table spots
ALTER TABLE spots ENABLE ROW LEVEL SECURITY;

-- Politique pour les spots publi√©s
CREATE POLICY "Public spots are viewable by everyone" ON spots
  FOR SELECT USING (status = 'published');

-- Politique pour les cr√©ateurs
CREATE POLICY "Users can update own spots" ON spots
  FOR UPDATE USING (auth.uid() = user_id);
```

## üìã Checklist de S√©curit√©

### Avant le D√©ploiement
- [ ] Variables d'environnement s√©curis√©es
- [ ] APP_KEY g√©n√©r√© et unique
- [ ] Mode production activ√©
- [ ] Debug d√©sactiv√©
- [ ] HTTPS configur√©
- [ ] Headers de s√©curit√© configur√©s
- [ ] Rate limiting activ√©
- [ ] Logs de s√©curit√© configur√©s

### Maintenance R√©guli√®re
- [ ] Audit des d√©pendances (hebdomadaire)
- [ ] Review des logs de s√©curit√© (quotidien)
- [ ] Mise √† jour des d√©pendances (mensuel)
- [ ] Test de restauration des backups (trimestriel)
- [ ] Audit de s√©curit√© complet (annuel)

## üìö Ressources

- [OWASP Top 10](https://owasp.org/www-project-top-ten/)
- [AdonisJS Security](https://docs.adonisjs.com/guides/security)
- [Node.js Security Best Practices](https://nodejs.org/en/docs/guides/security/)
- [NIST Cybersecurity Framework](https://www.nist.gov/cyberframework)
description:
globs:
alwaysApply: true
---
